---
layout: post
title: "op scripts(owen)"
published: true
created:  2021 Apr 10 23:34:11
tags: [python]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -

# LSP v1
```python
from jnpr.junos import Device
from jnpr.junos.utils.start_shell import StartShell
from datetime import datetime as t
# from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
import os
import re

try:
    os.mkdir("/var/tmp/script_outputs")
except:
    print('Script Directory already existed')

Date = t.today().strftime("%Y%m%d%H%M%S")
# Path = os.getcwd() + "/{}/".format(Date)
Path = "/var/tmp/script_outputs/{}/".format(Date)
print(Path)
# os.mkdir(Path)
try:
    os.mkdir(Path)
except:
    print('Directory already existed')


class ERO_Trace(object):
    def __init__(self, ERO):
        self.ERO = ERO
        print "start"
        command = 'cli show configuration protocols bgp group iBGP \| match local-address'
        self.fqdn = os.popen(command).read()[14:-2]
        print self.ERO,self.fqdn
        RSVP_SESSION_NEIGHBOR = os.popen(
            'cli show configuration protocols mpls label-switched-path {} \| match to \|except description'.format(
                self.ERO)).read()[3:-2]
        print os.popen(
            'cli show configuration protocols mpls label-switched-path {} \| match to \|except description'.format(
                self.ERO)).read()
        self.RSVP_SESSION_NEIGHBOR = RSVP_SESSION_NEIGHBOR
        command = "cli show route receive-protocol bgp {} \| match '\*'".format(RSVP_SESSION_NEIGHBOR)
        try:
            dest = os.popen(command).read().splitlines()[0]
            Destination_IP = dest[2:dest.find('/')]
        except:
            Destination_IP = RSVP_SESSION_NEIGHBOR
        self.Destination_IP = Destination_IP
        print "##################"
        print Destination_IP
        LSP_List = set({})
        Next_Hop_List = set({})
        command = 'cli show route {} \|count'.format(Destination_IP)
        route = os.popen(command).read()
        self.document_InTextfile(command, route)
        for x in route.splitlines():
            if '-00' in x:
                LSP_List.add(x.split(' ')[-1])
                Next_Hop_List.add(x.split(' ')[-5])

        Next_Hop_List = list(Next_Hop_List)
        # LSP = list(LSP_List)[0]

        RRO_LIST = []
        command = 'cli show mpls lsp extensive name {} \| no-more'.format(self.ERO)
        RRO = os.popen(command).read()
        self.document_InTextfile(command, RRO)
        for x in RRO.splitlines():
            if " S " in x: RRO_LIST.append(x)

        Unilist_List = []
        command = 'cli show route forwarding-table destination {} table default'.format(Destination_IP)
        Forwarding = os.popen(command).read()
        self.document_InTextfile(command, Forwarding)
        for x in Forwarding.splitlines():
            if 'ulst' in x: Unilist_List.append(int(x.split(' ')[x.split(' ').index('ulst') + 2]))
            if 'comp' in x: Unilist_List.append(int(x.split(' ')[x.split(' ').index('comp') + 6]))

        Label_Out_List = [0, 0]
        command = 'cli show rsvp session detail name {} \| no-more'.format(self.ERO)
        RSVP_Session = os.popen(command).read()
        self.document_InTextfile(command, RSVP_Session)
        for RSVP_Session1 in RSVP_Session.split(RSVP_SESSION_NEIGHBOR):
            if "LSPpath: Secondary" in RSVP_Session1:
                index = 1
            if "LSPpath: Primary" in RSVP_Session1:
                index = 0
            for x in RSVP_Session1.splitlines():
                if "Label out:" in x: Label_Out_List[index] = int(x.split(' ')[-1])

        FPC_LIST = []
        command = 'cli show chassis hardware models \| no-more'
        FPC = os.popen(command).read()
        self.document_InTextfile(command, FPC)
        for x in FPC.splitlines():
            if 'show' not in x and 'FPC' in x: FPC_LIST.append(x.split('    ')[0])

        for Unilist in Unilist_List:
            for FPC in FPC_LIST:
                self.document_InTextfile(command, os.popen(
                    'cprod -A {} -c "show nhdb id {} extensive"'.format(
                        str(FPC).replace('FPC ', 'fpc'), Unilist)).read())

        command = 'ping -c 5 {}'.format(Destination_IP)
        PING = os.popen(command).read()
        self.document_InTextfile(command, PING)

        # TRACEROUTE = os.popen('traceroute {}'.format(Destination_IP), this=None)[1]
        # self.document_InTextfile(command,TRACEROUTE)

        for x in range(0, len(Next_Hop_List)):
            data = "---> Starting trace for nexthop {} from ingress LSR".format(x)
            self.document_InTextfile(command, data)
            fqdn = Next_Hop_List[x]
            Label_Out = Label_Out_List[x]
            while Label_Out != 3:
                print("{}, {}".format(fqdn, Label_Out))
                fqdn, Label_Out = self.Collect_Data(fqdn, Label_Out)

    def document_InTextfile(self, command, Data):
        try:
            with open(Path + self.ERO + '.txt', 'a') as file:
                file.write(self.fqdn + " :----->" + command + '\n' + Data + '\n\n\n')
        except:
            print(self.ERO + ": " + self.fqdn + " :----->\n" + Data)
            print('**Failed to create text file output for {}'.format(self.ERO))

    def Collect_Data(self, fqdn, Label_Out):
        self.fqdn = fqdn
        print("Conecting to {}".format(fqdn))
        ss = StartShell(Device(host=fqdn, user='junisp', passwd='c5%!4yAa'))
        ss.open()

        LSP_List = []
        Next_Hop_List = []
        # print ("before route")
        command = 'cli show route label {}'.format(Label_Out)
        route = ss.run(command, this=None, timeout=5)[1]
        # print ("after route")
        self.document_InTextfile(command, route)
        # print ("after self.document_InTextfile")
        print("route: ", route)
        for x in route.splitlines():
            if '-00' in x:
                LSP_List.append(x.split(' ')[-1])
                Next_Hop_List.append(x.split(' ')[-5])

        LSP = LSP_List[0]

        RRO_LIST = []
        command = 'cli show mpls lsp extensive name {} \| no-more'.format(LSP)
        RRO = ss.run(command, this=None, timeout=5)[1]
        self.document_InTextfile(command, RRO)
        for x in RRO.splitlines():
            if " S " in x: RRO_LIST.append(x)

        Unilist_List = []
        command = 'cli show route forwarding-table label {} table default'.format(Label_Out)
        Forwarding = ss.run(command, this=None, timeout=5)[1]
        self.document_InTextfile(command, Forwarding)
        for x in Forwarding.splitlines():
            if 'ulst' in x: Unilist_List.append(int(x.split(' ')[x.split(' ').index('ulst') + 2]))
            if 'comp' in x: Unilist_List.append(int(re.search("comp\s+(\d+)", x).group(1)))

        Label_Out_List = [None, None]
        command = 'cli show rsvp session detail name {} \| no-more'.format(self.ERO)
        RSVP_Session = ss.run(command, this=None, timeout=5)[1]
        self.document_InTextfile(command, RSVP_Session)
        for RSVP_Session1 in RSVP_Session.split(self.RSVP_SESSION_NEIGHBOR):
            if "LSPpath: Secondary" in RSVP_Session1:
                index = 1
            if "LSPpath: Primary" in RSVP_Session1:
                index = 0
            for x in RSVP_Session1.splitlines():
                if "Label out:" in x: Label_Out_List[index] = int(x.split(' ')[-1])

        FPC_LIST = []
        command = 'cli show chassis hardware models \| no-more'
        FPC = ss.run(command, this=None, timeout=5)[1]
        self.document_InTextfile(command, FPC)
        for x in FPC.splitlines():
            if 'show' not in x and 'FPC' in x: FPC_LIST.append(x.split('    ')[0])

        for Unilist in Unilist_List:
            print Unilist
            for FPC in FPC_LIST:
                print FPC
                command = 'cprod -A {} -c "show nhdb id {} extensive"'.format(
                    str(FPC).replace('FPC ', 'fpc'), Unilist)
                self.document_InTextfile(command, ss.run(command, this=None, timeout=5)[1])
        FPC_LIST = []

        PING = ss.run('ping -c 5 {}'.format(self.Destination_IP), this=None, timeout=5)[1]
        self.document_InTextfile(command, PING)

        # TRACEROUTE = ss.run('traceroute {}'.format(Destination_IP), this=None)[1]
        # self.document_InTextfile(command,TRACEROUTE)

        ss.close()
        for Label_Out in Label_Out_List:
            if Label_Out is not None:
                return Next_Hop_List[0], Label_Out


if __name__ == '__main__':
    # Screen_Length = os.popen('cli set cli screen-length 0; cli set cli screen-width 0').read()
    log = os.popen('cli show log messages \| match RPD_MPLS_PATH_DOWN').read()
    ERO_List = set({})
    for line in log.splitlines():
        if "down on" in line:
            ERO_List.add(line.split()[-1])
    ERO_List = list(ERO_List)
    print "ERO_List = {}".format(ERO_List)


    def fun(x):
        print("inside worker {}".format(x))

    if ERO_List!=[]:
        for ERO in ERO_List:
            if len(ERO)>2:ERO_Trace(ERO)

    else:print "Empty list"
    print "done"
    # with ProcessPoolExecutor(len(ERO_List)) as ex:
    # res = ex.map(ERO_Trace, ERO_List)
    # res = ex.map(fun, ERO_List)
```

# LSP v2


```python
from jnpr.junos import Device
from jnpr.junos.utils.start_shell import StartShell
from datetime import datetime as t
import subprocess
import argparse
import os
import re

def parse_args(fake_args=None):
    main_parser = argparse.ArgumentParser(prog='lspcheck.py')
    main_parser.add_argument("-l", "--lsp", type=str, dest="lsp_name", required=True, help="Comma separated names of LSPs")
    return main_parser.parse_args()

def main():
        cli_arguments = parse_args()
        lsp_name=cli_arguments.lsp_name
        with open(os.devnull, 'wb') as DEVNULL:
            completed_process = subprocess.run('cli -c "show configuration protocols bgp |display inheritance no-comments  | match local-address"', shell=True, stdout=subprocess.PIPE, stderr=DEVNULL)
            config =[i[-14:-1] for i in list(set(completed_process.stdout.decode('ascii').split("\n"))) if i!=""]
            cmd='cli -c'+" "+'\''+'show configuration protocols mpls label-switched-path {}'.format(lsp_name)+'|match \"to \"' +'\''
            completed_process = subprocess.run(cmd,shell=True, stdout=subprocess.PIPE, stderr=DEVNULL)
            RSVP_SESSION_NEIGHBOR=completed_process.stdout.decode('ascii').split(",")[0].split(" ")[1][:-2]
            print(RSVP_SESSION_NEIGHBOR)

if __name__ == '__main__':
    try:os.mkdir("/var/tmp/script_outputs")
    except:print('Script Directory already existed')
    main()
```

# log collection

```python
import argparse
import os
import datetime
def parse_args(fake_args=None):
    main_parser = argparse.ArgumentParser(prog='jtacdatacollectionk.py')
    main_parser.add_argument("-c", "--case", type=str, dest="casenumber",
        required=True, help="inputcasenumber")
    return main_parser.parse_args()
def get_date(days):
    cur=datetime.date.today()
    delta=datetime.timedelta(days=days)
    return str(cur-delta)
def get_boxname():
    command = 'cli show configuration \|display inheritance no-comments \
        \|display set \|match host-name '
    cmdoutput = os.popen(command).read().splitlines()
    hostnameline = [line for line in cmdoutput if 'system host-name' in line]
    hostname = "" if not hostnameline else hostnameline[0].split(" ")[-1]
    #output=[i for i in os.popen(command).read().split(" ") if i!=""][-1]
    #if output:return name+output
    return hostname
def main():
    main_parser = argparse.ArgumentParser(prog='jtacdatacollectionk.py')
    main_parser.add_argument("-c", "--case", type=str, dest="casenumber",
        required=True, help="inputcasenumber")
    args = main_parser.parse_args(['-c', "2020-0101-0202"])
    cli_arguments = args.casenumber
    folder_path="/var/tmp/"+cli_arguments
    #try:
    #    os.mkdir(folder_path)
    #except:
    #    print('Directory already existed')
    os.system(f'cli file make-directory {folder_path}')
    boxname="".join([i for i in get_boxname() if i.isalnum()])
    date="".join([i for i in get_date(0) if i.isalnum()])
    #get RSI
    #command = 'cli -c ' +'\"request support information |no-more |save '\
    #    +folder_path+'/'+'RSI_'+boxname+'_'+date+'\"'
    command = 'cli ' +'\"request support information |no-more |save '\
        +folder_path+'/'+'RSI_'+boxname+'_'+date+'\"'
    os.system(command)
    #get all log 
    command ='cli -c '+ '\"file archive source /var/log compress destination '\
        +folder_path+'/'+'LOG_'+boxname+'_'+date+'.tgz'+'\"'
    os.system(command)
    return
if __name__ == '__main__':
    main()
```

# remoteconnection

```python
#!/usr/bin/python3
from jnpr.junos import Device
from jnpr.junos.utils.start_shell import StartShell
from datetime import datetime as t
import subprocess
import argparse
import os
import re
import datetime

# def parse_args(fake_args=None):
#     main_parser = argparse.ArgumentParser(prog='remotecheck.py')
#     main_parser.add_argument("-n", "--name", type=str, dest="device_name", required=True, help="inputcasenumber")
#     return main_parser.parse_args()
class rc(object):
    def get_date(self, days):
        cur=datetime.date.today()
        delta=datetime.timedelta(days=days)
        return str(cur-delta)

    def build_directory(self, dir_name):
        try:os.mkdir(dir_name)
        except:print('Directory already existed')
        return

    def deploycmd_noshow(self, box_name,cli_knob):
        if not box_name:
            print("stop here ,please re-run within the correct box name")
            return
        try:
            ss = StartShell(Device(host=box_name, user='labroot', passwd='lab123'))
            ss.open()
            open=ss.run(cli_knob, this=None, timeout=5)
            ss.close()
        except:print(box_name+" is unreachable")
        return

    def getoutput(self, box_name,cli_knob,file_name):
        if not box_name:
            print("stop here ,please re-run within the correct box name")
            return
        if not file_name:
            print("stop here ,please provide a name for file")
            return
        try:
            ss = StartShell(Device(host=box_name, user='labroot', passwd='lab123'))
            ss.open()
            command = cli_knob
            output = ss.run(command, this=None, timeout=5)
            temp=[]
            if output[0]:temp=output[1].replace("\r","").split("\n")
            else:
                print("nothing here")
                return 
            dir_name=box_name.split(".")[0]+self.get_date(0).replace("-","")
            os.system('date'+' >>'+dir_name+'/'+file_name)
            str2='echo  \"{}\"'.format('#_# '*20)
            for i in temp:
                str1='echo  \"{}\"'.format(i)
                os.system(str1+' >>'+dir_name+'/'+file_name)
            os.system(str2+' >>'+dir_name+'/'+file_name)
            ss.close()
        except Exception as e:
            print(e)
        return

if __name__ == '__main__':
    getoutput("","")
```


# RPD CPU


```python
#!/usr/bin/python3
import remoteconnection as rc
import os
import threading
import time

if __name__ == '__main__':
    date=rc.get_date(0).replace("-","")
    boxname=["erebus.ultralab.juniper.net","hypnos.ultralab.juniper.net","moros.ultralab.juniper.net","norfolk.ultralab.juniper.net","alcoholix.ultralab.juniper.net","antalya.ultralab.juniper.net","automatix.ultralab.juniper.net","beltway.ultralab.juniper.net","bethesda.ultralab.juniper.net","botanix.ultralab.juniper.net","dogmatix.ultralab.juniper.net","getafix.ultralab.juniper.net","idefix.ultralab.juniper.net","kratos.ultralab.juniper.net","pacifix.ultralab.juniper.net","photogenix.ultralab.juniper.net","rio.ultralab.juniper.net","matrix.ultralab.juniper.net","cacofonix.ultralab.juniper.net","asterix.ultralab.juniper.net","timex.ultralab.juniper.net","greece.ultralab.juniper.net","holland.ultralab.juniper.net","nyx.ultralab.juniper.net","atlantix.ultralab.juniper.net","obelix.ultralab.juniper.net","camaro.ultralab.juniper.net","mustang.ultralab.juniper.net"]
    instance=[]
    for i in boxname:
        dir_name=i.split(".")[0]+date
        trd=threading.Thread(target=rc.build_directory,args=(dir_name,))
        trd.start()
        instance.append(trd)
    for thread in instance:
        thread.join()
    # set task accounting on 
    cli_cmd="cli set task accounting on"
    instance=[]
    for i in boxname:
        dir_name=i.split(".")[0]+date
        trd=threading.Thread(target=rc.deploycmd_noshow,args=(i,cli_cmd,))
        trd.start()
        instance.append(trd)
    for thread in instance:
        thread.join()
    ###get cpu usage
    num=int(input("how many times will be collected at interval 10s :",))
    filename=input("please name the file you want to save :",)
    cli_cmd="cli show task accounting detail \|no-more "
    for _ in range(num):
        for i in boxname:
            dir_name=i.split(".")[0]+date
            trd=threading.Thread(target=rc.getoutput,args=(i,cli_cmd,filename,))
            trd.start()
            instance.append(trd)
        for thread in instance:
            thread.join()
        time.sleep(10)

    # set task accounting off 
    cli_cmd="cli set task accounting off"
    instance=[]
    for i in boxname:
        dir_name=i.split(".")[0]+date
        trd=threading.Thread(target=rc.deploycmd_noshow,args=(i,cli_cmd,))
        trd.start()
        instance.append(trd)
    for thread in instance:
        thread.join()
```


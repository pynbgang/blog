---
layout: post
title: "[283] Move Zeroes"
published: true
created:  2021 Feb 20 12:56:30
tags: [python, leetcode, easy]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -

# [[283] Move Zeroes](https://leetcode.com/problems/move-zeroes/description/)

    || * algorithms
    || * Easy (58.33%)
    || * Likes:    5072
    || * Dislikes: 157
    || * Total Accepted:    1M
    || * Total Submissions: 1.8M
    || * Testcase Example:  '[0,1,0,3,12]'
    || 
    || Given an array nums, write a function to move all 0's to the end of it
    while maintaining the relative order of the non-zero elements.
    || 
    || Example:
    || 
    || 
    || Input: [0,1,0,3,12]
    || Output: [1,3,12,0,0]
    || 
    || Note:
    || 
    || 
    || 	You must do this in-place without making a copy of the array.
    || 	Minimize the total number of operations.

# solution

```python
class Solution:     #ping
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        i, l = 0, len(nums)
        while i < l:
            if nums[i]:
                i += 1
            else:
                nums.append(nums.pop(i))
                l -= 1

class Solution:     #lmv
    def moveZeroes(self, nums):
        zero = 0  # records the position of "0"
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[i], nums[zero] = nums[zero], nums[i]
                zero += 1
```

# tips

lmv is the similiar idea of "bubble" sort.



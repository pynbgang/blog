---
layout: post
title: "[90] Subsets II"
published: true
created:  2020 Aug 10 10:19:58 AM
tags: [python, leetcode, medium]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -


[[90] Subsets II](https://leetcode.com/problems/subsets-ii/description/)

    || * algorithms
    || * Medium (45.03%)
    || * Likes:    1722
    || * Dislikes: 75
    || * Total Accepted:    285.6K
    || * Total Submissions: 606.6K
    || * Testcase Example:  '[1,2,2]'
    || * Source Code:       90.subsets-ii.py
    ||
    || Given a collection of integers that might contain duplicates, nums,
    return all possible subsets (the power set).
    ||
    || Note: The solution set must not contain duplicate subsets.
    ||
    || Example:
    ||
    || Input: [1,2,2]
    || Output:
    || [
    || ⁠ [2],
    || ⁠ [1],
    || ⁠ [1,2,2],
    || ⁠ [2,2],
    || ⁠ [1,2],
    || ⁠ []
    || ]

# owen

```python
class Solution(object):
    def subsetsWithDup(self, nums):
        if not nums:return []
        lenth1=len(nums)
        if lenth1==1:return [[],nums]
        nums.sort()
        self.l=[[]]
        for i in range(1,lenth1):
            self.helper(nums,i,[])
        return self.l+[nums]
    def helper(self,l1,k,temp):
        if k==0 and  temp not in self.l:
            self.l.append(temp)
            return
        for i in range(len(l1)):
            temp.append(l1[i])
            self.helper(l1[i+1:],k-1,list(temp))
            temp.pop()
```

# jj

```python
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        return self.helper(nums)

    def helper(self, nums):
        if not nums:
            return [[]]
        n, res = nums.count(nums[0]), []
        for r in self.helper(nums[n:]):
            for i in range(n + 1):
                res.append([nums[0]] * i + r)
        return res
```

## ping: how it works

    1, 1, 2, 3
    n=2
    nums[2:]: 2,3
    for r in null, 2, 3, 2+3
        i = 0, 1, 2
            i:0 append r
            i:1 append nums0+r
            i:2 append nums0+nums0+r



```python
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = [[]]
        for n in set(nums):
            res = [r + [n] * i for r in res for i in range(nums.count(n) + 1)]
        return res
```




---
layout: post
title: "[79] Word Search"
published: true
created:  2020 Aug 08 05:42:16 PM
tags: [python, leetcode, medium, any, recursion, generator, iterator]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -

# [[79] Word Search](https://leetcode.com/problems/word-search/description/)

    || * algorithms
    || * Medium (33.49%)
    || * Likes:    4063
    || * Dislikes: 195
    || * Total Accepted:    506.5K
    || * Total Submissions: 1.4M
    || * Testcase Example:  '[["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]\n"ABCCED"'
    || * Source Code:       79.word-search.py
    ||
    || Given a 2D board and a word, find if the word exists in the grid.
    ||
    || The word can be constructed from letters of sequentially adjacent cell,
    where "adjacent" cells are those horizontally or vertically neighboring. The
    same letter cell may not be used more than once.
    ||
    || Example:
    ||
    ||
    || board =
    || [
    || ⁠ ['A','B','C','E'],
    || ⁠ ['S','F','C','S'],
    || ⁠ ['A','D','E','E']
    || ]
    ||
    || Given word = "ABCCED", return true.
    || Given word = "SEE", return true.
    || Given word = "ABCB", return false.
    ||  
    || Constraints:
    ||
    ||
    || 	board and word consists only of lowercase and uppercase English letters.
    || 	1 <= board.length <= 200
    || 	1 <= board[i].length <= 200
    || 	1 <= word.length <= 10^3

## own

```python
class Solution(object):
    def exist(self, board, word):
        if not word:
            return True
        if not board:
            return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.helper(board, word, i, j):
                    return True
        return False

    def helper(self, board, word, i, j):
        if board[i][j] == word[0]:
            if len(word)==1:
                return True
        else:return False
        board[i][j] = " "
        if i > 0 and self.helper(board, word[1:], i-1, j):
            return True
        if i < len(board)-1 and self.helper(board, word[1:], i+1, j):
            return True
        if j > 0 and self.helper(board, word[1:], i, j-1):
            return True
        if j < len(board[0])-1 and self.helper(board, word[1:], i, j+1):
            return True
        board[i][j] = word[0]
        return False
```

## owen

```python
class Solution(object):
    def exist(self, board, word):
        if not word:return True
        if not board:return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==word[0] and self.helper(board, word, i, j):return True
        return False
    def helper(self, board, word, i, j):
        if board[i][j] == word[0]:
            if len(word)==1:return True
        else:return False
        board[i][j] = "-1"
        if i > 0 and self.helper(board, word[1:], i-1, j):return True
        if i < len(board)-1 and self.helper(board, word[1:], i+1, j):return True
        if j > 0 and self.helper(board, word[1:], i, j-1):return True
        if j < len(board[0])-1 and self.helper(board, word[1:], i, j+1):return True
        board[i][j] = word[0]
        return False
```

## ping

this is based on 
[[695] Max Area of Island](https://leetcode.com/problems/max-area-of-island/description/)
{% link _posts/2020-08-08-[79]-word-search.markdown %}

```python
class Solution:     #ping
    def exist(self, grid: List[List[str]], word: str) -> bool:

        if not grid: return False           #特判：空矩阵
        rows, cols = len(grid), len(grid[0])

        for i in range(rows):               #全矩阵扫描，要找的是：
            for j in range(cols):           #"从给定某一点开始，能够向四周扩展
                if self.dfs(grid,i,j,word): #成功匹配”的情形
                    return True             #那么就返回成功， 不再继续寻找了
        return False                        #如果搜完矩阵没有这种情形，返回失败

    def dfs(self,grid,i,j,word):            #因此递归函数的设计，也是要：
        #print("dfs: get %s, %s" % (i, j))
        if grid[i][j] == word[0]:           #"从给定一点开始，如向周围扩展能匹配
            grid[i][j] = 0                  #则返回true，其他返回false"
        else:                               #先看首字母，如匹配就置0，这样后面
            return False                    #向周围查找时候这个点不再能重复匹配
        if len(word) == 1:                  #如首字母不匹配则失败。如果已经匹配
            return True                     #并到最后字母，则成功
        for m,n in [(i-1,j),(i+1,j),(i,j-1),(i,j+1)]: #四邻查找
            if m>=0 and m<len(grid) and n>=0 and n<len(grid[0]) and grid[m][n]==word[1]:
                if self.dfs(grid,m,n,word[1:]):     #检查边界，如果找到，则不断
                    return True             #递归看是否成功
        grid[i][j] = word[0]                #若四邻搜完都不见，则恢复置位的字母
        return False                        #否则会影响caller从其他位置开始的查找
```

## jj

```python
class Solution:     #jj, no need setting matching char
    def exist(self, board: List[List[str]], word: str) -> bool:
        self.board = board                      #global var in recursion
        self.word = word    #debugging
        return any(self.helper(i, j, [], word)    #scan grid, if starting from
                   for i in range(len(board))     #any position match can succeed
                   for j in range(len(board[0]))) #then return True

    def helper(self, i, j, path, word):
        # if word == self.word: print(i, j)     #debugging code
        if not word:        #if word is empty then match succeed
            return True     #if first ch matchs at a new pos, check 4 neighbors
        if self.board[i][j] == word[0] and (i, j) not in path:
            for r, c in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:
                if (not word[1:] or                     #if reach end of word, or
                   (r in range(len(self.board)) and     #within proper position
                    c in range(len(self.board[0])) and  #all rest chs of word
                    self.helper(r, c, path + [(i, j)], word[1:]) #can be found
                   )):      #also adding searched pos in searched-list
                    return True                         #then return true
        return False #otherwise (if no searches ever return True), return False
```

## tips

### any

in the example, below code will return immediately as soon as helper returns
true at one position.

        return any(self.helper(i, j, [], word)    #scan grid, if starting from
                   for i in range(len(board))     #any position match can succeed
                   for j in range(len(board[0]))) #then return True

because *any will return when first True is seen*, to test it out:

    def test():
        for i, b in enumerate([True, True, False, False]):
            print(i, b)
            yield b
    print(any(test()))


however, below code will go though all matrix, even if a True is returned in
previous position:

        return any([self.helper(i, j, [], word)    #scan grid, if starting from
                   for i in range(len(board))     #any position match can succeed
                   for j in range(len(board[0]))]) #then return True

because [ list comp ] has to be composed completely before any can see it.

### iterator/generator

call a generator won't execute it's code at all

    [ins] In [3]: def another(): 
            ...:     print("another!!!") 
            ...:     yield False 
            ...:  
            ...: print("testing now") 
            ...: another()                                               
    testing now
    Out[3]: <generator object another at 0x7f343ce76410>

iterate the generator will execute it's code

iterating with `for`:

    [ins] In [1]: def another(): 
            ...:     print("another!!!") 
            ...:     yield False 
            ...:  
            ...: print("testing now") 
            ...: for a in another(): 
            ...:     pass 
            ...:                                                         
    testing now
    another!!!

iterating with `any`:

    [ins] In [2]: def another(): 
            ...:     print("another!!!") 
            ...:     yield False 
            ...:  
            ...: print("testing now") 
            ...: any(another()) 
            ...:  
            ...:                                                         
    testing now
    another!!!
    Out[2]: False


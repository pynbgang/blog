---
layout: post
title: "two sum"
published: true
created:  2020 Feb 03 07:56:23 PM
tags: [python, easy, leetcode, lintcode, dict]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -

# [two sum](https://www.lintcode.com/problem/two-sum/description)

# wangmazi

```python
class Solution(object):
    def twoSum(self, nums, target):
        #hash用于建立数值到下标的映射
        hash = {}
        #循环nums数值，并添加映射
        for i in range(len(nums)):
            # print(i, ":", nums[i], hash)
            if target - nums[i] in nums[i+1:]:
                #print(
                #   "found it! %d (%d - %d) in hash" % 
                #   (target - nums[i], target, nums[i]) 
                #)
                return [hash[target - nums[i]], i]
            hash[nums[i]] = i
        #无解的情况
        return [-1, -1]
```

## test

    $ leetcode test 1.two-sum.py -t '[2,7,11,15,4]\n15'
    ✔ Finished
    ✔ Your Input: [2,7,11,15,4]
    15
    ✔ Output (64 ms): [2,4]
    ✔ Expected Answer: [2,4]
    ✔ Stdout: 
    0 : 2 {}
    1 : 7 {2: 0}
    2 : 11 {2: 0, 7: 1}
    3 : 15 {2: 0, 7: 1, 11: 2}
    4 : 4 {2: 0, 7: 1, 11: 2, 15: 3}
    found it! 11 (15 - 4) in hash

    $ leetcode submit 1.two-sum.py
    ✔ Accepted
    ✔ 29/29 cases passed (48 ms)        #<---
    ✔ Your runtime beats 79.5 % of python3 submissions
    ✔ Your memory usage beats 61.16 % of python3 submissions (14.1 MB)

# ping: modified (w/o hash)

save a little bit space, but much slower

```python
class Solution(object):
    def twoSum(self, nums, target):
        for i in range(len(nums)):
            if target - nums[i] in nums[i+1:]:
                return [i, i+1+nums[i+1:].index(target - nums[i])]
        return [-1, -1]
```

## test

    $ leetcode submit 1.two-sum.py
    ✔ Accepted
    ✔ 29/29 cases passed (860 ms)       #<---
    ✔ Your runtime beats 25.05 % of python3 submissions
    ✔ Your memory usage beats 81.63 % of python3 submissions (13.7 MB)

the slowness is because of `in list` versus `in hash`, plus sliding operation?

# leetcode most voted

https://leetcode.com/problems/two-sum/discuss/2

* Lang:    python
* Author:  Google
* Votes:   71

```python
class Solution:
    # @return a tuple, (index1, index2)
    # 8:42
    def twoSum(self, num, target):
        map = {}
        for i in range(len(num)):
            if num[i] not in map:
                map[target - num[i]] = i + 1
            else:
                return map[num[i]], i + 1

        return -1, -1
```


---
layout: post
title: "fizz-buzz"
published: true
created:  2020 Jan 18 07:30:17 PM
tags: [python, lintcode, easy, string]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -

# easy: [fizz-buzz](https://www.lintcode.com/problem/fizz-buzz/description)

    9. Fizz Buzz

    Given number n. Print number from 1 to n. But:
    when number is divided by 3, print "fizz".
    when number is divided by 5, print "buzz".
    when number is divided by both 3 and 5, print "fizz buzz".
    when number can't be divided by either 3 or 5, print the number itself.
    Example
    If n = 15, you should return:
    [
    "1", "2", "fizz",
    "4", "buzz", "fizz",
    "7", "8", "fizz",
    "buzz", "11", "fizz",
    "13", "14", "fizz buzz"
    ]

    If n = 10, you should return:
    [
    "1", "2", "fizz",
    "4", "buzz", "fizz",
    "7", "8", "fizz",
    "buzz"
    ]
    Challenge
    Can you do it with only one if statement?


## ping

```python
class Solution:
    """
    @param n: An integer
    @return: A list of strings.
    """
    def fizzBuzz(self, n):
        # write your code here

        tmp = [i for i in range(1, n+1)]
        for i in range(0, n):
            if not tmp[i] % 3 and not tmp[i] % 5:
                tmp[i] = "fizz buzz"
                continue
            if not tmp[i] % 3:
                tmp[i] = "fizz"
                continue
            if not tmp[i] % 5:
                tmp[i] = "buzz"
                continue
            tmp[i] = str(tmp[i])
        return tmp
```

## owen

```python
    def fizzBuzz(self, n):
        #owen's version
        tmp=[]
        for i in range(1,n+1):
            if (i%3==0 and i%5==0):
                tmp.append("fizz buzz")
            elif (i%3==0):
                tmp.append("fizz")
            elif (i%5==0):
                tmp.append("buzz")
            else:
                tmp.append(str(i))
        return tmp
        """
```

## oneliners (jj, best) 

```python
    def fizzBuzz(self, n):
        return [str(i) * bool(i%3 and i%5)  +
            'fizz' * (not i%3)              +
            ' ' * (not i%15)                +
            'buzz' * (not i%5)
            for i in range(1,n+1)
        ]
```

tips:

* with any giving number, only one item will stay and the
others will be empty ''. so '+' effectively becomes 'or'.

  so it can also be:

  ```python
    def fizzBuzz(self, n):
        return [str(i) * bool(i%3 and i%5)  or
            'fizz' * (not i%3)              or
            ' ' * (not i%15)                or
            'buzz' * (not i%5)
            for i in range(1,n+1)
        ]
  ```

  or (best, saved condition for str(i) with `or`)


  ```python
      def fizzBuzz(self, n):
          return ["fizz" * (not i%3)  +
            " " * (not i%15)          +
            "buzz" * (not i%5)        or
            str(i) for i in range(1, n + 1)
            ]
  ```

* `'a' * not 1` will error out. has to be `'a' * (not 1)`



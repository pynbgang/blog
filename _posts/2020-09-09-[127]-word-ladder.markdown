---
layout: post
title: "[127] Word Ladder"
published: true
created:  2020 Sep 09 11:30:53 PM
tags: [python, leetcode]
categories: [tech]

---

TABLE OF CONTENT

* auto-gen TOC:
{:toc}

- - -

# [[127] Word Ladder](https://leetcode.com/problems/word-ladder/description/)
|| 
|| * algorithms
|| * Medium (27.29%)
|| * Likes:    3537
|| * Dislikes: 1251
|| * Total Accepted:    457.3K
|| * Total Submissions: 1.5M
|| * Testcase Example:  '"hit"\n"cog"\n["hot","dot","dog","lot","log","cog"]'
|| * Source Code:       127.word-ladder.py
|| 
|| Given two words (beginWord and endWord), and a dictionary's word list, find
the length of shortest transformation sequence from beginWord to endWord, such
that:
|| 
|| 	Only one letter can be changed at a time.
|| 	Each transformed word must exist in the word list.
|| 
|| Note:
|| 
|| 	Return 0 if there is no such transformation sequence.
|| 	All words have the same length.
|| 	All words contain only lowercase alphabetic characters.
|| 	You may assume no duplicates in the word list.
|| 	You may assume beginWord and endWord are non-empty and are not the same.
|| 
|| 
|| Example 1:
|| 
|| 
|| Input:
|| beginWord = "hit",
|| endWord = "cog",
|| wordList = ["hot","dot","dog","lot","log","cog"]
|| 
|| Output: 5
|| 
|| Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
|| return its length 5.
|| 
|| Example 2:
|| Input:
|| beginWord = "hit"
|| endWord = "cog"
|| wordList = ["hot","dot","dog","lot","log"]
|| 
|| Output: 0
|| 
|| Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.

## jj

```python
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        q, dic = [(beginWord, 1)], set(wordList)
        while q:
            word, hop = q.pop(0)
            if word == endWord:
                return hop
            for i in range(len(word)):
                for c in "abcdefghijklmnopqrstuvwxyz":
                    nxt = word[:i] + c + word[i + 1:]
                    if nxt in dic:
                        q.append((nxt, hop + 1))
                        dic.remove(nxt)
        return 0
```

```python
class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        cur, dic = {beginWord: [[beginWord]]}, set(wordList)
        while cur:
            nxt, seen = dict(), set()
            for word, paths in cur.items():
                if word == endWord:
                    return paths
                for i in range(len(word)):
                    for c in "abcdefghijklmnopqrstuvwxyz":
                        nw = word[:i] + c + word[i + 1:]
                        if nw in dic:
                            seen.add(nw)
                            nxt[nw] = nxt.get(nw, []) + [p + [nw]for p in paths]
            cur, dic = nxt, dic - seen
        return []
```
